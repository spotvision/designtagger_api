{
  "openapi": "3.0.2",
  "info": {
    "title": "Swagger Petstore - OpenAPI 3.0",
    "description": "This is the API specification for Spot Vision LLC's Design Taggerâ„¢ system. Using this API, you can\n* Create new Tags\n* ",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.17"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [
    {
      "url": "/api/v3"
    }
  ],
  "tags": [
    {
      "name": "tag",
      "description": "Everything about your Tags",
      "externalDocs": {
        "description": "",
        "url": ""
      }
    },
    {
      "name": "designs",
      "description": "Designs available to you",
      "externalDocs": {
        "description": "",
        "url": ""
      }
    },
    {
      "name": "scans",
      "description": "Scans of your tags"
    }
  ],
  "paths": {
    "/designs": {
      "get": {
        "summary": "Returns list of available designs.",
        "description": "",
        "operationId": "",
        "tags": [
          "designs"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "design-id",
            "description": "ID of design to return (default=all)",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "description": "Design name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "description": "List of designs is provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Invalid api key."
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/tags": {
      "get": {
        "tags": [
          "tag"
        ],
        "summary": "Tags",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "tags",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status values that need to be considered for filter",
            "required": false,
            "explode": true,
            "schema": {
              "type": "string",
              "default": "available",
              "enum": [
                "available",
                "pending",
                "sold"
              ]
            }
          },
          {
            "in": "path",
            "name": "tag-name",
            "description": "Name of tag to retrieve (default=all)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      },
      "post": {
        "summary": "",
        "description": "",
        "operationId": "",
        "tags": [],
        "parameters": [],
        "requestBody": {},
        "responses": {}
      },
      "delete": {
        "summary": "",
        "description": "",
        "operationId": "",
        "tags": [],
        "parameters": [],
        "requestBody": {},
        "responses": {}
      },
      "patch": {
        "summary": "",
        "description": "",
        "operationId": "",
        "tags": [],
        "parameters": [],
        "requestBody": {},
        "responses": {}
      }
    },
    "/scans": {
      "get": {
        "description": "",
        "operationId": "",
        "tags": [
          "scans"
        ],
        "parameters": [],
        "requestBody": {},
        "responses": {}
      }
    },
    "/tags/image": {
      "get": {
        "tags": [
          "tag"
        ],
        "summary": "Tags",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "tags",
        "parameters": [
          {
            "in": "path",
            "name": "tag-id",
            "description": "ID of tag to image (default=all)",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "resolution",
            "description": "Resolution in pixels (NxN)",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Design": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the design"
          },
          "repeats": {
            "type": "boolean",
            "description": "Does the pattern repeat"
          }
        },
        "xml": {
          "name": "order"
        },
        "required": [
          "name",
          "repeats"
        ]
      },
      "Tag": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "fehguy",
            "description": "Unique name of the tag"
          },
          "design": {
            "type": "string",
            "description": "Design name of the tag"
          },
          "active": {
            "type": "boolean",
            "description": "Active or disabled"
          },
          "created_time": {
            "type": "string",
            "description": "Date created"
          },
          "last_scanned_time": {
            "type": "string",
            "description": "Date last scanned"
          },
          "link": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "Type of data returned with scan: Image, Text, Web"
              },
              "data": {
                "type": "string",
                "description": "Text, image URL, or web URL"
              }
            },
            "required": [
              "type",
              "data"
            ],
            "description": "Data returned to scanning device"
          },
          "actions": {
            "type": "object",
            "properties": {
              "endpoint": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "URL of API endpoint"
                  },
                  "method": {
                    "type": "string",
                    "description": "GET or POST"
                  },
                  "body": {
                    "type": "string",
                    "description": "BODY (required for POST)"
                  }
                },
                "required": [
                  "url",
                  "method"
                ],
                "description": "Call an API endpoint"
              },
              "sms": {
                "type": "object",
                "properties": {
                  "number": {
                    "type": "string",
                    "description": "Phone number to message, format '(xxx) xxx-xxxx'"
                  },
                  "body": {
                    "type": "string",
                    "description": "Message to send"
                  }
                },
                "required": [
                  "number",
                  "body"
                ],
                "description": "Message (SMS) a phone (U.S. only)"
              }
            },
            "description": "Actions performed on back-end when scanned"
          }
        },
        "xml": {
          "name": "customer"
        },
        "required": [
          "design",
          "name",
          "active",
          "created_time",
          "link"
        ]
      },
      "Scan": {
        "type": "object",
        "properties": {
          "tag_name": {
            "type": "string",
            "description": "Name of scanned tag"
          },
          "scan_time": {
            "type": "string",
            "description": "Time of scan"
          },
          "ip_address": {
            "type": "string",
            "description": "IP address of scanning client"
          },
          "location": {
            "type": "object",
            "properties": {
              "region": {
                "type": "string",
                "description": "Region (e.g. State) where scanned"
              },
              "country": {
                "type": "string",
                "description": "Country where scanned"
              },
              "city": {
                "type": "string",
                "description": "City where scanned"
              },
              "longitude": {
                "type": "number",
                "description": "Approximate longitude of scan"
              },
              "latitude": {
                "type": "number",
                "description": "Approximate latitude of scan"
              }
            },
            "required": [
              "region",
              "country",
              "city",
              "longitude",
              "latitude"
            ]
          }
        },
        "required": [
          "tag_name",
          "scan_time",
          "ip_address"
        ]
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "xml": {
          "name": "##default"
        }
      }
    },
    "requestBodies": {
      "Pet": {
        "description": "Pet object that needs to be added to the store",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          }
        }
      },
      "UserArray": {
        "description": "List of user object",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "petstore_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://petstore3.swagger.io/oauth/authorize",
            "scopes": {
              "write:pets": "modify pets in your account",
              "read:pets": "read your pets"
            }
          }
        }
      },
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      }
    }
  }
}