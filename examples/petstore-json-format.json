{
  "openapi": "3.0.2",
  "info": {
    "title": "Swagger Petstore - OpenAPI 3.0",
    "description": "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.17"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [
    {
      "url": "/api/v3"
    }
  ],
  "tags": [
    {
      "name": "tag",
      "description": "Everything about your Tags",
      "externalDocs": {
        "description": "",
        "url": ""
      }
    },
    {
      "name": "designs",
      "description": "Designs available to you",
      "externalDocs": {
        "description": "",
        "url": ""
      }
    },
    {
      "name": "scans",
      "description": "Scans of your tags"
    }
  ],
  "paths": {
    "/designs": {
      "get": {
        "summary": "Returns list of available designs.",
        "description": "",
        "operationId": "",
        "tags": [
          "designs"
        ],
        "parameters": [],
        "requestBody": {},
        "responses": {
          "200": {
            "description": "List of designs is provided."
          },
          "403": {
            "description": "Invalid api key."
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/tags": {
      "get": {
        "tags": [
          "tag"
        ],
        "summary": "Tags",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "tags",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status values that need to be considered for filter",
            "required": false,
            "explode": true,
            "schema": {
              "type": "string",
              "default": "available",
              "enum": [
                "available",
                "pending",
                "sold"
              ]
            }
          },
          {
            "in": "path",
            "name": "tag-name",
            "description": "Name of tag to retrieve (default=all)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      },
      "post": {
        "summary": "",
        "description": "",
        "operationId": "",
        "tags": [],
        "parameters": [],
        "requestBody": {},
        "responses": {}
      },
      "delete": {
        "summary": "",
        "description": "",
        "operationId": "",
        "tags": [],
        "parameters": [],
        "requestBody": {},
        "responses": {}
      },
      "patch": {
        "summary": "",
        "description": "",
        "operationId": "",
        "tags": [],
        "parameters": [],
        "requestBody": {},
        "responses": {}
      }
    },
    "/tags/create": {
      "post": {
        "summary": "Create a new design tag",
        "description": "Formatted text here",
        "operationId": "",
        "tags": [],
        "parameters": [],
        "requestBody": {},
        "responses": {}
      }
    },
    "/scans": {
      "get": {
        "description": "",
        "operationId": "",
        "tags": [
          "scans"
        ],
        "parameters": [],
        "requestBody": {},
        "responses": {}
      }
    }
  },
  "components": {
    "schemas": {
      "Design": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the design"
          },
          "repeats": {
            "type": "boolean",
            "description": "Does the pattern repeat"
          }
        },
        "xml": {
          "name": "order"
        },
        "required": [
          "name",
          "repeats"
        ]
      },
      "Tag": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "fehguy",
            "description": "Unique name of the tag"
          },
          "design": {
            "type": "string",
            "description": "Design name of the tag"
          },
          "active": {
            "type": "boolean",
            "description": "Active or disabled"
          },
          "created_time": {
            "type": "string",
            "description": "Date created"
          },
          "last_scanned_time": {
            "type": "string",
            "description": "Date last scanned"
          },
          "link": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "Type of data returned with scan: Image, Text, Web"
              },
              "data": {
                "type": "string",
                "description": "Text, image URL, or web URL"
              }
            },
            "required": [
              "type",
              "data"
            ],
            "description": "Data returned to scanning device"
          },
          "actions": {
            "type": "object",
            "properties": {
              "endpoint": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "URL of API endpoint"
                  },
                  "method": {
                    "type": "string",
                    "description": "GET or POST"
                  },
                  "body": {
                    "type": "string",
                    "description": "BODY (required for POST)"
                  }
                },
                "required": [
                  "url",
                  "method"
                ],
                "description": "Call an API endpoint"
              },
              "sms": {
                "type": "object",
                "properties": {
                  "number": {
                    "type": "string",
                    "description": "Phone number to message, format '(xxx) xxx-xxxx'"
                  },
                  "body": {
                    "type": "string",
                    "description": "Message to send"
                  }
                },
                "required": [
                  "number",
                  "body"
                ],
                "description": "Message (SMS) a phone (U.S. only)"
              }
            },
            "description": "Actions performed on back-end when scanned"
          }
        },
        "xml": {
          "name": "customer"
        },
        "required": [
          "design",
          "name",
          "active",
          "created_time",
          "link"
        ]
      },
      "Scan": {
        "type": "object",
        "properties": {
          "tag_name": {
            "type": "string",
            "description": "Name of scanned tag"
          },
          "scan_time": {
            "type": "string",
            "description": "Time of scan"
          },
          "ip_address": {
            "type": "string",
            "description": "IP address of scanning client"
          },
          "city": {
            "type": "string",
            "description": "City where scanned"
          },
          "region": {
            "type": "string",
            "description": "Region (e.g. State) where scanned"
          },
          "country": {
            "type": "string",
            "description": "Country where scanned"
          }
        },
        "required": [
          "tag_name",
          "scan_time",
          "ip_address",
          "city",
          "region",
          "country"
        ]
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "xml": {
          "name": "##default"
        }
      }
    },
    "requestBodies": {
      "Pet": {
        "description": "Pet object that needs to be added to the store",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          }
        }
      },
      "UserArray": {
        "description": "List of user object",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "petstore_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://petstore3.swagger.io/oauth/authorize",
            "scopes": {
              "write:pets": "modify pets in your account",
              "read:pets": "read your pets"
            }
          }
        }
      },
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      }
    }
  }
}